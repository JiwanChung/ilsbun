{"version":3,"sources":["meteor://ðŸ’»app/packages/jalik:ufs-local/ufs-local.js"],"names":[],"mappings":"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","file":"/packages/jalik_ufs-local.js","sourcesContent":["import {_} from 'meteor/underscore';\nimport {check} from 'meteor/check';\nimport {Meteor} from 'meteor/meteor';\n\n/**\n * File system store\n * @param options\n * @constructor\n */\nUploadFS.store.Local = function (options) {\n    // Default options\n    options = _.extend({\n        mode: '0744',\n        path: 'ufs/uploads',\n        writeMode: '0744'\n    }, options);\n\n    // Check options\n    if (typeof options.mode !== 'string') {\n        throw new TypeError('mode is not a string');\n    }\n    if (typeof options.path !== 'string') {\n        throw new TypeError('path is not a string');\n    }\n    if (typeof options.writeMode !== 'string') {\n        throw new TypeError('writeMode is not a string');\n    }\n\n    // Private attributes\n    let mode = options.mode;\n    let path = options.path;\n    let writeMode = options.writeMode;\n\n    if (Meteor.isServer) {\n        const fs = Npm.require('fs');\n\n        fs.stat(path, function (err) {\n            if (err) {\n                const mkdirp = Npm.require('mkdirp');\n\n                // Create the directory\n                mkdirp(path, {mode: mode}, function (err) {\n                    if (err) {\n                        console.error('ufs: cannot create store at ' + path + ' (' + err.message + ')');\n                    } else {\n                        console.info('ufs: store created at ' + path);\n                    }\n                });\n            } else {\n                // Set directory permissions\n                fs.chmod(path, mode, function (err) {\n                    err && console.error('ufs: cannot set store permissions ' + mode + ' (' + err.message + ')');\n                });\n            }\n        });\n    }\n\n    // Create the store\n    let self = new UploadFS.Store(options);\n\n    /**\n     * Returns the file path\n     * @param fileId\n     * @param file\n     * @return {string}\n     */\n    self.getFilePath = function (fileId, file) {\n        file = file || self.getCollection().findOne(fileId, {fields: {extension: 1}});\n        return file && self.getPath(fileId + (file.extension ? '.' + file.extension : ''));\n    };\n\n    /**\n     * Returns the path or sub path\n     * @param file\n     * @return {string}\n     */\n    self.getPath = function (file) {\n        return path + (file ? '/' + file : '');\n    };\n\n\n    if (Meteor.isServer) {\n        /**\n         * Removes the file\n         * @param fileId\n         * @param callback\n         */\n        self.delete = function (fileId, callback) {\n            let path = self.getFilePath(fileId);\n\n            if (typeof callback !== 'function') {\n                callback = function (err) {\n                    err && console.error('ufs: cannot delete file \"' + fileId + '\" at ' + path + ' (' + err.message + ')');\n                }\n            }\n            const fs = Npm.require('fs');\n            fs.stat(path, Meteor.bindEnvironment(function (err, stat) {\n                if (!err && stat && stat.isFile()) {\n                    fs.unlink(path, Meteor.bindEnvironment(function () {\n                        self.getCollection().remove(fileId);\n                        callback.call(this);\n                    }));\n                }\n            }));\n        };\n\n        /**\n         * Returns the file read stream\n         * @param fileId\n         * @param file\n         * @param options\n         * @return {*}\n         */\n        self.getReadStream = function (fileId, file, options) {\n            const fs = Npm.require('fs');\n            options = _.extend({}, options);\n            return fs.createReadStream(self.getFilePath(fileId, file), {\n                flags: 'r',\n                encoding: null,\n                autoClose: true,\n                start: options.start,\n                end: options.end\n            });\n        };\n\n        /**\n         * Returns the file write stream\n         * @param fileId\n         * @param file\n         * @param options\n         * @return {*}\n         */\n        self.getWriteStream = function (fileId, file, options) {\n            const fs = Npm.require('fs');\n            options = _.extend({}, options);\n            return fs.createWriteStream(self.getFilePath(fileId, file), {\n                flags: 'a',\n                encoding: null,\n                mode: writeMode,\n                start: options.start\n            });\n        };\n    }\n\n    return self;\n};\n"]}